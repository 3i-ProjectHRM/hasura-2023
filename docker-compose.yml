version: '3.6'
services:
  postgres:
    image: postgres:15
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 1s
      retries: 20

  adminer:
    image: adminer:4.8.1
    ports:
      - "${ADMINER_PORT:-8081}:8080"
    links:
      - postgres:db
    restart: unless-stopped

  hasura-engine:
    image: hasura/graphql-engine:v2.25.1.cli-migrations-v3
    ports:
      - "${HASURA_PORT:-5000}:8080"
    # volumes:
    #   - ./hasura-state:/project
    environment:
      # Setup connection & password
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD:-postgres}@postgres:5432/postgres
      # Apply the migrations at boot
      # HASURA_GRAPHQL_METADATA_DIR: "/project/metadata"
      # HASURA_GRAPHQL_MIGRATIONS_DIR: "/project/migrations"
      # Other settings
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, query-log
      HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: "true"
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_INFER_FUNCTION_PERMISSIONS: "false"
      # This container only runs the APIs, there is no need for the password?
      # HASURA_GRAPHQL_ADMIN_SECRET: "${HASURA_ADMIN_SECRET:-hasura}"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: timeout 1s bash -c ':> /dev/tcp/127.0.0.1/8080' || exit 1
      interval: 2s
      timeout: 1s
      retries: 20

  hasura-cli-console:
    restart: unless-stopped
    depends_on:
      hasura-engine:
        condition: service_healthy
    build: 
      dockerfile: hasura-cli.Dockerfile
    volumes:
      - ./hasura-state:/project
    expose:
      - 9695
    command: > 
      hasura console 
      --log-level DEBUG 
      --address "hasura-cli-console" 
      --no-browser 
      --api-host https://9693-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST} 
      --api-port 443
      --endpoint https://5000-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}
    working_dir: /project
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hasura-cli-console.rule=Host(`9695-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}`)"
      - "traefik.http.routers.hasura-cli-console.entrypoints=web"

  hasura-cli-api:
    restart: unless-stopped
    user: $(id -u):$(id -g)
    depends_on:
      hasura-engine:
        condition: service_healthy
    build: 
      dockerfile: hasura-cli.Dockerfile
    volumes:
      - ./hasura-state:/project
    expose:
      - 9693
    command:  hasura console --log-level DEBUG --address "hasura-cli-api" --no-browser 
    working_dir: /project
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hasura-cli-api.rule=Host(`9693-${GITPOD_WORKSPACE_ID}.${GITPOD_WORKSPACE_CLUSTER_HOST}`)"
      - "traefik.http.routers.hasura-cli-api.entrypoints=web"

  traefik:
    image: "traefik:v2.6"
    ports:
      # - "8080:8080"
      - "9693:80"
      - "9695:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"

volumes:
  postgres: